#!/bin/bash
set -e

command=$1

if ! [ -x "$(command -v jq)" ]; then
        echo "Error: jq is not installed" >&2
        exit 1
fi

if ! [ -x "$(command -v ssh)" ]; then
        echo "Error: ssh is not installed" >&2
        exit 1
fi

# todo: allow specifying a remote other than origin
git_remote_url=$(git config --get remote.origin.url)
if ! [[ "$git_remote_url" =~ ^ssh://.*@.*:[0-9]*/.*$ ]]; then
        echo "Error: expected \`remote.origin.url\` to follow format of \`ssh://username@host:port/repository/location\`" >&2
        exit 1
fi

git_remote_host=$(sed 's/^ssh:\/\/.*@\(.*\):.*$/\1/' <<< "$git_remote_url")
git_remote_login=$(sed 's/^ssh:\/\/\(.*\)@.*$/\1/' <<< "$git_remote_url")
git_remote_port=$(sed 's/^ssh:\/\/.*:\([^/]*\)\/.*$/\1/' <<< "$git_remote_url")
git_remote_project=$(sed 's/^ssh:\/\/.*:[0-9]*\/\(.*\)$/\1/' <<< "$git_remote_url")

get_changeset_ref() {
        # either a Change-Id or Gerrit Changeset number
        local changeset="$1"
        local patchset="${2:-latest}"

        local changeset_info
        changeset_info=$(ssh "$git_remote_host" -l "$git_remote_login" -p "$git_remote_port" gerrit query --format=JSON --current-patch-set --patch-sets change:"$changeset" | sed \$d)

        local changeset_project
        changeset_project=$(jq -crM .project <<< "$changeset_info")
        if [[ "$changeset_project" != "$git_remote_project" ]]; then
                echo Error: changeset is for project "$changeset_project", but local git repository is for project "$git_remote_project" >&2
                exit 1
        fi

        local changeset_ref
        if [[ "$patchset" == "latest" ]]; then
                changeset_ref=$(jq -crM .currentPatchSet.ref <<< "$changeset_info")
        else
                changeset_ref=$(jq -crM ".patchSets | map(. + {\"number\": .number | tonumber}) | .[] | select(.number == $patchset) | .ref" <<< "$changeset_info")

                if [[ -z "$changeset_ref" ]]; then
                        echo "Error: patchset $patchset not found for changeset $changeset" >&2
                        exit 1
                fi
        fi

        echo "$changeset_ref"
}


if [ "$command" == "checkout" ]; then
        changeset_ref=$(get_changeset_ref "$2" "$3")
        git fetch "$git_remote_url" "$changeset_ref" && git checkout FETCH_HEAD

elif [ "$command" == "cherry-pick" ]; then
        changeset_ref=$(get_changeset_ref "$2" "$3")
        git fetch "$git_remote_url" "$changeset_ref" && git cherry-pick -x FETCH_HEAD

elif [ "$command" == "fetch" ]; then
        changeset_ref=$(get_changeset_ref "$2" "$3")
        git fetch "$git_remote_url" "$changeset_ref"

elif [ "$command" == "link" ]; then
        # either a Change-Id or Commit SHA
        change_id_or_commit_sha="$2"

        if [[ $change_id_or_commit_sha =~ ^I.*$ ]]; then
                is_change_id=true
        else
                is_change_id=false
        fi

        if [[ $is_change_id = true ]]; then
                query="change:$change_id_or_commit_sha"
        else
                query="commit:$change_id_or_commit_sha"
        fi

        changeset_info=$(ssh "$git_remote_host" -l "$git_remote_login" -p "$git_remote_port" gerrit query --format=JSON --patch-sets "$query" | sed \$d)

        url=$(jq -crM .url <<< "$changeset_info")
        if [[ $is_change_id = true ]]; then
                echo "$url"
        else
                ref=$(jq -crM ".patchSets[] | select(.revision == \"$change_id_or_commit_sha\") | .number" <<< "$changeset_info")
                echo "$url"/"$ref"
        fi

elif [ "$command" == "pull" ]; then
        change_id=$(git --no-pager log --max-count 1 HEAD | grep Change-Id | sed 's/.*: \(.*\)/\1/')

        if [[ -z "$change_id" ]]; then
                echo "Error: Change-Id not found in HEAD commit" >&2
                exit 1
        fi

        changeset_ref=$(get_changeset_ref "$change_id" "$2")
        git pull "$git_remote_url" "$changeset_ref"

elif [ "$command" == "query" ]; then
        ssh "$git_remote_host" -l "$git_remote_login" -p "$git_remote_port" gerrit query --format=JSON --current-patch-set "${@:2}" | sed \$d

elif [ "$command" == "revert" ]; then
        changeset_ref=$(get_changeset_ref "$2" "$3")
        git fetch "$git_remote_url" "$changeset_ref" && git revert FETCH_HEAD

elif [ -z "$command" ]; then
        echo "Error: must specify a command" >&2
        exit 1

else
        echo "Error: $command not found" >&2
        exit 1
fi
